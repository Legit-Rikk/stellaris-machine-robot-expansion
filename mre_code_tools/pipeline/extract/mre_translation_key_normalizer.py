"""
Take the traits from modifiers_l_english.yml, find the uppercase traits, and map them to
mre_<trait_name> keys, with the original modifier as the value.
"""
import os
import re
import sys
import argparse
from json import dump as json_dump
from time import perf_counter


from pipeline.mre_common_vars import (
    AUTOGENERATED_HEADER,
    DEFAULT_UPPERCASE_LOCALISATION_MEGAMAP,
    DEFAULT_UPPERCASE_MODIFIERS_MEGAMAP,
    VANILLA_LOC_FILES_WITH_UPPERCASE_MODIFIERS,
)

def pick_uppercase_translation_keys(input_file_object, return_keys=False) -> list:
    uppercase_translation_keys = []
    uppercase_map_dict = {}
    translation_key = re.compile(r"(\w*):\d")
    for line in input_file_object:
        results = re.findall(translation_key, line)
        for result in results:
            if result.isupper() and result.startswith("MOD"):
                # breakpoint()
                if return_keys:
                    uppercase_map_dict[result] = 1
                else:
                    uppercase_translation_keys.append(
                        create_translation_key_map_prepend_mre(result)
                    )
    if return_keys:
        return uppercase_map_dict
    else:
        return uppercase_translation_keys


def create_translation_key_map_prepend_mre(uppercase_key: str):
    return f' mre_{uppercase_key.lower()}: "${uppercase_key}$"'

def do_all_work(base_stellaris_path):
    """ Read Stellaris loc files, pick out uppercase MODifiers, save to json and yml """

    uppercase_mega_map_dict = {}
    uppercase_mega_list = []

    for file_identifier in VANILLA_LOC_FILES_WITH_UPPERCASE_MODIFIERS:

        loc_filepath = os.path.join(
            base_stellaris_path, 'localisation', 'english', f"{file_identifier}.yml"
        )
        with open(loc_filepath, "r") as loc_file_object:
            _uppercase_keys_dict = pick_uppercase_translation_keys(
                loc_file_object, return_keys=True
            )
            uppercase_mega_map_dict.update(_uppercase_keys_dict)
    for uppercase_key in uppercase_mega_map_dict:
        uppercase_mega_list.append(
            create_translation_key_map_prepend_mre(uppercase_key)
        )
    with open(DEFAULT_UPPERCASE_MODIFIERS_MEGAMAP, 'w') as mega_map_dict_file:
        json_dump(uppercase_mega_map_dict, mega_map_dict_file, sort_keys=True)

    with open(DEFAULT_UPPERCASE_LOCALISATION_MEGAMAP, 'wb') as mega_map_loc_file:
        loc_body = f"""l_english:
{AUTOGENERATED_HEADER}
{'\n'.join(uppercase_mega_list)}
"""
        mega_map_loc_file.write(loc_body.encode('utf-8-sig'))

    print("+ Uppercase localisation JSON: Done")
    print("+ Uppercase localisation STELLARIS YML: Done")

if __name__== "__main__":
    start_time = perf_counter()
    parser = argparse.ArgumentParser(
        prog="0xRetro Stellaris Uppercase Localisation modifier harvester (MULSH)",
        description="Gather all MOD_ loc keys in the base game, create a hash map, and yml file for use in custom GUIs"
    )

    parser.add_argument(
        '--stellaris_path',
        help='Location of base Stellaris game files',
        required=False
    )

    args = parser.parse_args()

    print("0xRetro Stellaris script chopper.. Let's wrangle some uppercase translation key names for consistency. ")
    if not args.stellaris_path:
        sys.exit('Specify --base_stellaris_path')
    elif args.stellaris_path:
        do_all_work(args.stellaris_path)

    end_time = perf_counter()
    print(
        # f"Look in {output_file.name}.\n "
        f"DONE in {str(end_time - start_time)[:5]} seconds and and hope we never have to run this again."
    )
