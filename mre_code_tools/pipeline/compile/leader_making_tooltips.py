from mre_code_tools.pipeline.compile.generate_trait_tooltips import create_tooltip_for_leader
from mre_code_tools.pipeline.mre_common_vars import AUTOGENERATED_HEADER, RARITIES


def iterate_traits_make_leadermaking_tooltips_code(organized_traits_dict, for_class):
    leader_making_tooltips_copypaste_blob = [AUTOGENERATED_HEADER]
    for rarity_level in RARITIES:
        for leader_making_trait in organized_traits_dict['leader_making_traits'][rarity_level]:
            tooltip_code_for_leadermaking_trait = create_tooltip_for_leader(
                trait_dict=leader_making_trait, leader_class=for_class, feature="core_modifying"
            )
            leader_making_tooltips_copypaste_blob.append(tooltip_code_for_leadermaking_trait)
    return ''.join(leader_making_tooltips_copypaste_blob)

# def write_leadermaking_tooltips_to_file(input_codegen_json_file_name: str):
#     # Open up 99_mre_<leaderclass>traits_for_codegen.json and write tooltips for a class
#     buffer = ''
#     base_filename =  input_codegen_json_file_name.rsplit('.',1)
#     leadermaking_tt_filename = f"{base_filename}_leadermaking_tooltips.txt"
#     output_file_name = os.path.join(
#         BUILD_FOLDER,
#         leadermaking_tt_filename
#     )
#     with open(input_codegen_json_file_name, "w") as source_codegen_data:
#         buffer = json_load(source_codegen_data)
#     detected_leader_class = input_codegen_json_file_name('_')[2]
#     tooltips_blob_for_writing = iterate_traits_make_leadermaking_tooltips_code(
#         buffer, for_class=detected_leader_class)
#     with open(output_file_name, "wb") as leadermaking_effects_output:
#         sys.stdout.write(f"Writing {detected_leader_class} leadermaking tooltips code to {leadermaking_effects_output.name}\n")
#         leadermaking_effects_output.write(
#             tooltips_blob_for_writing.encode('utf-8')
#         )
